package com.ImageCaptureApplications.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.ImageCaptureApplications.Downloader.BatchReport;
import com.ImageCaptureApplications.Downloader.DownloadFilesUtil;
import com.ImageCaptureApplications.Downloader.InsertingDocument;
import com.ImageCaptureApplications.model.FileTypes;
import com.ImageCaptureApplications.model.ResponseJson;
import java.io.File;

import java.net.URI;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.FileEntity;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import com.ImageCaptureApplications.Downloader.*;

@Component
public class ProcessFilesUtil  {
	//OCR credentials

	@Value("${subscriptionKey}")
	private String subscriptionKey;
	
	private String endpoint="https://rahul.cognitiveservices.azure.com/";
	private final String uriBase = endpoint + "vision/v3.1/ocr";
	@Scheduled(fixedDelay =180000, initialDelay = 9000)
	public void processFile() {
		String batchId = new String();
		batchId = BatchIdGenerator.BatchIDGenerator();
		
		RestTemplate restTemplate = new RestTemplate();
		int j = 0;
		int downloadFails= 0;
		int downloads = 0;
		int extractionFails = 0;
		int extracts = 0;
		while (true) {
			Map<String, Integer> payload = new HashMap<String, Integer>();
			payload.put("pagesize", 4);
			payload.put("pageno", ++j);

			ResponseJson responseJson = restTemplate.postForObject("http://127.0.0.1:5000/apigetfiles", payload,ResponseJson.class);

			List<FileTypes> urlList = responseJson.getData();
			
			if (urlList == null || urlList.isEmpty())
				break;
			for (int i = 0; i < urlList.size(); i++) {
				File file = new File("C:\\xampp1\\tomcat\\webapps\\ROOT\\server\\" + urlList.get(i).getFileName());

				String fileURL = urlList.get(i).getFileURL();
				String saveDir = "E:/pancard";
				try {
					DownloadFilesUtil.downloadFile(fileURL, saveDir);
					BatchProcess.main(urlList.get(i).getFileName(),"TodaysDate", batchId, "DOWNLOADED", "OK!");
					downloads++;
					
				} 
				catch (IOException ex) {
					ex.printStackTrace();
					StatusUpdater.main(urlList.get(i).getFileName(), "UNABLETODOWNLOAD");
					CommentUpdater.main(urlList.get(i).getFileName(), ex.getMessage());
					downloadFails++;
				}
				CloseableHttpClient httpClient = HttpClientBuilder.create().build();
				try {
					URIBuilder uriBuilder = new URIBuilder(uriBase);
					uriBuilder.setParameter("language", "en");
					uriBuilder.setParameter("detectOrientation", "true");
					// Request parameters.
					URI uri = uriBuilder.build();
					HttpPost request = new HttpPost(uri);
					// Request headers.
					request.setHeader("Content-Type", "application/octet-stream");
					request.setHeader("Ocp-Apim-Subscription-Key", subscriptionKey);
					// Request body.
					FileEntity fileEntity = new FileEntity(file);
					request.setEntity(fileEntity);
					
					// Call the REST API method and get the response entity.
					HttpResponse response = httpClient.execute(request);
					HttpEntity entity = response.getEntity();
					if (entity != null) {
						// Format and display the JSON response.
						String jsonString = EntityUtils.toString(entity);
						JSONObject json = new JSONObject(jsonString);
					
						//System.out.println("REST Response:\n");
						
						//System.out.println(json.toString(2));
						
						//InsertingDocument.main(urlList.get(i).getFileName(),"TodaysDate", "autoGeneratedBatchId", "PROCESSED", "MLResponse");
						
						RestTemplate restTemplate1 = new RestTemplate();

						Map<String, String> payload1 = new HashMap<String, String>();
						payload1.put("pancard",ServiceUtility.panc(json));
						payload1.put("name", ServiceUtility.namep(json));
						payload1.put("fatherName", ServiceUtility.fathern(json));
						payload1.put("dob", ServiceUtility.dobp(json));
						ApiExtractData apiExtract = restTemplate1.postForObject("http://127.0.0.1:5000/apiputfiles", payload1,ApiExtractData.class);
						StatusUpdater.main(urlList.get(i).getFileName(), "EXTRACTED");
						//update using objid
					
						//bro.createNewDocumet(urlList.get(i).getFileName(),"TodaysDate", "autoGeneratedBatchId", "DOWNLOADED", "OK");
						extracts++;
					}
				}
				catch (Exception e)
				{
					// Display error message.
					System.out.println(e.getMessage());
					StatusUpdater.main(urlList.get(i).getFileName(), "FAILURE");
					CommentUpdater.main(urlList.get(i).getFileName(), e.getMessage());
					extractionFails++;
				}
			}
			if((downloads+ downloadFails) == responseJson.getTotalCount())
				break;
			
		}
		BatchReport.createNewDocumet(batchId, downloadFails, downloads, extracts, extractionFails,"AutoGenTimeStamp");
		System.out.println("Processed Successfully");
		//System.exit(0);
		
	}
}